// Variáveis globais no início do arquivo
let estados = [];
let transicoes = {};
let estadoInicial = null;
let estadosFinais = [];
let cy;
let nodePositions = {};
let modoExclusao = false;
let elementoSelecionado = null;

// Função de inicialização do Cytoscape
function inicializarCytoscape() {
  cy = cytoscape({
    container: document.getElementById('canvas'),
    elements: [],
    style: [
      // Seus estilos existentes...
    ],
    layout: {
      name: 'preset',
      fit: true,
      padding: 30
    }
  });

  // Configurar eventos DO DEPOIS que o cytoscape estiver inicializado
  configurarEventos();
  atualizarCanvas();
}

function configurarEventos() {
  // Evento de arrastar nós
  cy.on('dragfree', 'node', function(event) {
    const node = event.target;
    nodePositions[node.id()] = node.position();
  });

  // Evento de clique para transições
  cy.on('tap', 'node', function(evt) {
    if (modoExclusao) {
      tratarCliqueExclusao(evt.target);
      return;
    }
    // Seu código existente para criação de transições...
  });

  // Evento geral para exclusão
  cy.on('tap', function(event) {
    if (!modoExclusao) return;
    
    if (event.target === cy) {
      if (elementoSelecionado) {
        elementoSelecionado.unselect();
        elementoSelecionado = null;
      }
      return;
    }
    
    tratarCliqueExclusao(event.target);
  });
}

function tratarCliqueExclusao(target) {
  if (elementoSelecionado) {
    elementoSelecionado.unselect();
  }
  
  target.select();
  elementoSelecionado = target;
  
  const tipo = target.isNode() ? 'estado' : 'transição';
  const confirmacao = confirm(`Deseja remover este ${tipo}?`);
  
  if (confirmacao) {
    if (target.isNode()) {
      removerEstado(target.id());
    } else {
      removerTransicao(target.data('source'), target.data('label'));
    }
    atualizarCanvas();
  }
  
  desativarModoExclusao();
}

function removerEstado(estado) {
  estados = estados.filter(e => e !== estado);
  Object.keys(transicoes).forEach(key => {
    if (key.startsWith(estado + ',') || transicoes[key] === estado) {
      delete transicoes[key];
    }
  });
  if (estadoInicial === estado) estadoInicial = null;
  estadosFinais = estadosFinais.filter(e => e !== estado);
  delete nodePositions[estado];
}

function removerTransicao(origem, simbolo) {
  delete transicoes[`${origem},${simbolo}`];
}

function ativarModoExclusao() {
  modoExclusao = true;
  cy.nodes().style('border-color', '#ff0000');
  cy.edges().style('line-color', '#ff0000');
  alert("Modo de exclusão ativado. Clique no elemento que deseja remover.");
}

function desativarModoExclusao() {
  modoExclusao = false;
  cy.nodes().style('border-color', '#fff');
  cy.edges().style('line-color', '#999');
  if (elementoSelecionado) {
    elementoSelecionado.unselect();
    elementoSelecionado = null;
  }
}

// Inicializa quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
  inicializarCytoscape();
});

// ... (mantenha suas outras funções existentes)